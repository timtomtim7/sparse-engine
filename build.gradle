import org.gradle.internal.os.OperatingSystem

group 'blue.sparse'
version '1.0.1'

switch ( OperatingSystem.current() ) {
    case OperatingSystem.WINDOWS:
        project.ext.lwjglNatives = "natives-windows"
        break
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
}

project.ext.lwjglVersion = "3.1.3"

buildscript {
    ext.kotlin_version = '1.2.30'

    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'kotlin'

apply plugin: 'maven-publish'

configure(project) {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                name = "sparse"
                url "F:\\maven"
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url 'https://sparse.blue/maven' }
    mavenLocal()
}

dependencies {
    compile "blue.sparse:math:1.1.3"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:1.2.10"
    compile "org.lwjgl:lwjgl:$lwjglVersion"
    compile "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    compile "org.lwjgl:lwjgl-jemalloc:$lwjglVersion"
    compile "org.lwjgl:lwjgl-openal:$lwjglVersion"
    compile "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    compile "org.lwjgl:lwjgl-stb:$lwjglVersion"
    runtime "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-jemalloc:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
    runtime "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task testJar(type: Jar) {
    classifier = 'tests'
    from sourceSets.test.output
    with jar
}

task fatTestJar(type: Jar) {
    from { configurations.testRuntime.collect { it.isDirectory() ? it : zipTree(it) } }
    with testJar
}

task copyDependencies(type: Sync) {
    into "build/libs/libs"
    from {
        configurations.testRuntime.collect {
            println(it.name)
        	if(!it.isDirectory() && it.name.contains("natives"))
				zipTree(it).filter { !it.name.endsWith(".git") && !it.name.endsWith(".sha1") }
			else it
		}
    }
}
